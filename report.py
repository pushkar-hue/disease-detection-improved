
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak, Flowable
from reportlab.lib.units import inch, cm
from reportlab.pdfgen import canvas
import io
from PIL import Image as PILImage
import os
from datetime import datetime

class HorizontalLine(Flowable):
    """Custom flowable for a horizontal line"""
    def __init__(self, width, thickness=1, color=colors.black):
        Flowable.__init__(self)
        self.width = width
        self.thickness = thickness
        self.color = color
        
    def draw(self):
        self.canv.setLineWidth(self.thickness)
        self.canv.setStrokeColor(self.color)
        self.canv.line(0, 0, self.width, 0)

def generate_professional_report(report_data, image_path, save_path, gemini_report_content):
    """
    Generate a professional-looking medical report with enhanced formatting.
    
    :param report_data: Dictionary containing prediction, confidence, and analysis
    :param image_path: Path to the uploaded patient image
    :param save_path: Path to save the generated PDF
    :param gemini_report_content: Content generated by Gemini API
    """
    # Create document
    doc = SimpleDocTemplate(
        save_path,
        pagesize=letter,
        leftMargin=1*inch,
        rightMargin=1*inch,
        topMargin=1*inch,
        bottomMargin=1*inch
    )
    
    # Story to hold flowable elements
    story = []
    
    # Create styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontSize=16,
        textColor=colors.HexColor('#1a4e8c'),
        spaceAfter=0.2*inch,
        alignment=1  # Center alignment
    )
    
    heading1_style = ParagraphStyle(
        'Heading1',
        parent=styles['Heading1'],
        fontSize=14,
        textColor=colors.HexColor('#1a4e8c'),
        spaceBefore=0.2*inch,
        spaceAfter=0.1*inch
    )
    
    heading2_style = ParagraphStyle(
        'Heading2',
        parent=styles['Heading2'],
        fontSize=12,
        textColor=colors.HexColor('#2a6eba'),
        spaceBefore=0.15*inch,
        spaceAfter=0.05*inch
    )
    
    normal_style = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        spaceBefore=6
    )
    
    info_style = ParagraphStyle(
        'Info',
        parent=styles['Normal'],
        fontSize=10,
        leftIndent=0.2*inch
    )
    
    disclaimer_style = ParagraphStyle(
        'Disclaimer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#404040'),
        fontName='Helvetica-Oblique',
        alignment=1  # Center alignment
    )
    
    # Header with logo and title
    # In a real application, you would have a logo image
    # For now, we'll create a simple header table
    
    # Add a logo placeholder (would be your medical organization's logo)
    logo_path = image_path  # Using the patient image as a logo placeholder for now
    try:
        # Resize image for header
        img = PILImage.open(logo_path)
        img = img.resize((100, 60), PILImage.LANCZOS)
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG')
        img_byte_arr = img_byte_arr.getvalue()
        logo_image = Image(io.BytesIO(img_byte_arr), width=1*inch, height=0.6*inch)
    except:
        # If there's an issue with the image, just skip the logo
        logo_image = None
    
    # Create report header
    if logo_image:
        header_data = [[logo_image, Paragraph("AI-Powered Medical Diagnosis", title_style)]]
        header_table = Table(header_data, colWidths=[1.2*inch, 4.8*inch])
        header_table.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ALIGN', (1, 0), (1, 0), 'CENTER'),
        ]))
        story.append(header_table)
    else:
        story.append(Paragraph("AI-Powered Medical Diagnosis", title_style))
    
    story.append(HorizontalLine(450, 2, colors.HexColor('#1a4e8c')))
    story.append(Spacer(1, 0.2*inch))
    
    # Report metadata
    current_date = datetime.now().strftime('%B %d, %Y')
    report_id = f"RPT-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    metadata_style = ParagraphStyle(
        'Metadata',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.HexColor('#404040')
    )
    
    metadata = [
        [Paragraph("Report Date:", metadata_style), Paragraph(current_date, metadata_style)],
        [Paragraph("Report ID:", metadata_style), Paragraph(report_id, metadata_style)],
        [Paragraph("Model:", metadata_style), Paragraph(report_data['display_name'], metadata_style)]
    ]
    
    metadata_table = Table(metadata, colWidths=[1*inch, 4*inch])
    metadata_table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('LEFTPADDING', (0, 0), (-1, -1), 0),
        ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
    ]))
    
    story.append(metadata_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Patient Information (placeholder - in a real system, this would be filled with actual patient data)
    story.append(Paragraph("Patient Information", heading1_style))
    story.append(HorizontalLine(450, 1, colors.HexColor('#1a4e8c')))
    
    patient_data = [
        [Paragraph("Patient Name:", info_style), Paragraph("[PATIENT NAME]", info_style)],
        [Paragraph("Medical Record #:", info_style), Paragraph("[MEDICAL RECORD NUMBER]", info_style)],
        [Paragraph("Date of Birth:", info_style), Paragraph("[DOB]", info_style)],
        [Paragraph("Referring Physician:", info_style), Paragraph("[PHYSICIAN NAME]", info_style)]
    ]
    
    patient_table = Table(patient_data, colWidths=[1.5*inch, 3.5*inch])
    patient_table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('LEFTPADDING', (0, 0), (-1, -1), 0),
        ('RIGHTPADDING', (0, 0), (-1, -1), 0),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
        ('TOPPADDING', (0, 0), (-1, -1), 2),
    ]))
    
    story.append(patient_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Analysis Results
    story.append(Paragraph("Analysis Results", heading1_style))
    story.append(HorizontalLine(450, 1, colors.HexColor('#1a4e8c')))
    
    # Create a visually distinct box for the analysis result
    result_text = f"<b>Result:</b> {report_data['prediction']}"
    confidence_text = f"<b>Confidence:</b> {report_data['confidence']:.2f}%"
    risk_level = "High Risk" if report_data['confidence'] > 85 else "Moderate Risk" if report_data['confidence'] > 50 else "Low Risk"
    risk_text = f"<b>Risk Assessment:</b> {risk_level}"
    
    # Choose color based on risk level
    risk_color = "#e74c3c" if risk_level == "High Risk" else "#f39c12" if risk_level == "Moderate Risk" else "#2ecc71"
    
    result_style = ParagraphStyle(
        'Result',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        textColor=colors.HexColor('#FFFFFF'),
        backColor=colors.HexColor(risk_color),
        borderColor=colors.HexColor(risk_color),
        borderWidth=1,
        borderPadding=10,
        borderRadius=5
    )
    
    result_table_data = [
        [Paragraph(result_text, result_style)],
        [Paragraph(confidence_text, result_style)],
        [Paragraph(risk_text, result_style)]
    ]
    
    result_table = Table(result_table_data, colWidths=[5*inch])
    result_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor(risk_color)),
        ('BOX', (0, 0), (-1, -1), 1, colors.HexColor(risk_color)),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('LEFTPADDING', (0, 0), (-1, -1), 10),
        ('RIGHTPADDING', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
    ]))
    
    story.append(result_table)
    story.append(Spacer(1, 0.2*inch))
    
    # Image Analysis
    story.append(Paragraph("Image Analysis", heading1_style))
    story.append(HorizontalLine(450, 1, colors.HexColor('#1a4e8c')))
    
    # Add the analyzed image to the report
    try:
        img = Image(image_path, width=3*inch, height=2.5*inch)
        story.append(img)
    except:
        story.append(Paragraph("Image could not be displayed", normal_style))
    
    story.append(Spacer(1, 0.2*inch))
    
    # Start detailed analysis section
    story.append(Paragraph("Detailed Medical Analysis", heading1_style))
    story.append(HorizontalLine(450, 1, colors.HexColor('#1a4e8c')))
    
    # Process the Gemini report content
    # Split by sections (assumed to be marked by **Section Title:** format)
    report_sections = []
    current_section = {"title": "", "content": []}
    
    for line in gemini_report_content.split('\n'):
        if line.strip().startswith('**') and ':**' in line:
            # Save previous section if it exists
            if current_section["title"]:
                report_sections.append(current_section)
            
            # Start new section
            parts = line.split(':**', 1)
            section_title = parts[0].strip('* ')
            section_content = parts[1].strip() if len(parts) > 1 else ""
            
            current_section = {"title": section_title, "content": [section_content] if section_content else []}
        else:
            if current_section["title"]:
                current_section["content"].append(line)
    
    # Add the last section
    if current_section["title"]:
        report_sections.append(current_section)
    
    # Process each section
    for section in report_sections:
        if not section["title"]:
            continue
            
        # Add section heading
        story.append(Paragraph(section["title"], heading2_style))
        
        # Add section content
        section_text = " ".join([line.strip() for line in section["content"] if line.strip()])
        story.append(Paragraph(section_text, normal_style))
        story.append(Spacer(1, 0.1*inch))
    
    # Final note
    story.append(Spacer(1, 0.2*inch))
    story.append(HorizontalLine(450, 1, colors.HexColor('#cccccc')))
    story.append(Spacer(1, 0.1*inch))
    
    note_style = ParagraphStyle(
        'Note',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.HexColor('#555555'),
        leftIndent=0.2*inch,
        rightIndent=0.2*inch
    )
    
    story.append(Paragraph("<b>IMPORTANT NOTE:</b> This report is generated using artificial intelligence and is intended to assist healthcare professionals. It should not be used as the sole basis for medical decision-making. The results should be interpreted in conjunction with clinical findings, patient history, and other diagnostic tests.", note_style))
    
    # Add disclaimer at the bottom
    story.append(Spacer(1, 0.5*inch))
    story.append(HorizontalLine(450, 1, colors.HexColor('#cccccc')))
    story.append(Spacer(1, 0.1*inch))
    
    disclaimer_text = "DISCLAIMER: This report is AI-generated and should not replace professional medical advice. Please consult with a healthcare provider for proper diagnosis and treatment."
    story.append(Paragraph(disclaimer_text, disclaimer_style))
    
    # Build the document
    doc.build(story)
    
    return save_path

